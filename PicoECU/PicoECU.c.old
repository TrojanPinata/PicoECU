#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/i2c.h"
#include "hardware/dma.h"
#include "hardware/timer.h"
#include "hardware/clocks.h"
#include "ssd1306.h"

#define I2C_PORT            i2c0
#define I2C_SDA             0
#define I2C_SCL             1
#define OLED_ADDR           0x3C

#define ADC_HALL_PIN        26 
#define ADC_MAP_PIN         27 
#define ADC_TEMP_PIN        28 

#define ADC_HALL_CHANNEL    0
#define ADC_MAP_CHANNEL     1 
#define ADC_TEMP_CHANNEL    2 

#define INJECTOR_PIN        21


#define HALL_THRESH         1500
#define HYSTERESIS          200
#define TEMP_BETA           3950
#define TEMP_ROOM_RES       10000

#define COLD_RATIO          1.3f


volatile uint32_t rpm = 0;
volatile uint16_t map_val = 0;
volatile float injector_us = 0;
volatile float temp_c = 25.0;
volatile uint16_t hall_adc = 0;
absolute_time_t last_hall_time;
volatile bool hall_prev_state = false;

ssd1306_t disp;

void injector_pulse(float pulse_us) {
    gpio_put(INJECTOR_PIN, 1);
    sleep_us((int)pulse_us);
    gpio_put(INJECTOR_PIN, 0);
}

float read_temp_c(uint16_t temp_raw) {
    float v = temp_raw * 3.3f / 4095.0f;
    float resistance = (3.3f * 10000 / v) - 10000;
    float t = 1.0f / (1.0f / 298.15f + log(resistance / TEMP_ROOM_RES) / TEMP_BETA);
    return t - 273.15f;
}

void display_info() {
    char buf[32];
    ssd1306_clear(&disp);
    snprintf(buf, sizeof(buf), "RPM: %u", rpm);
    ssd1306_draw_string(&disp, 0, 0, 1, buf);
    snprintf(buf, sizeof(buf), "MAP: %u", map_val);
    ssd1306_draw_string(&disp, 0, 10, 1, buf);
    snprintf(buf, sizeof(buf), "PW: %.1fus", injector_us);
    ssd1306_draw_string(&disp, 0, 20, 1, buf);
    snprintf(buf, sizeof(buf), "Temp: %.1fC", temp_c);
    ssd1306_draw_string(&disp, 0, 30, 1, buf);
    snprintf(buf, sizeof(buf), "hall: %u", hall_adc);
    ssd1306_draw_string(&disp, 0, 40, 1, buf);
    ssd1306_show(&disp);
}

void poll_sensors() {
    adc_select_input(ADC_MAP_CHANNEL);
    map_val = adc_read();
    bool intake = (map_val < 600);

    adc_select_input(ADC_TEMP_CHANNEL);
    uint16_t therm_raw = adc_read();
    temp_c = read_temp_c(therm_raw);

    // determine fuel amount
    float fuel_ratio = 1.0f;
    if (temp_c < 20.0f) {
        fuel_ratio = COLD_RATIO; 
    }

    if (intake) {
        float base_pulse_us = 1000 + (700 - map_val) * 2;
        injector_us = base_pulse_us * fuel_ratio;

        if (injector_us > 5000) injector_us = 5000;
        if (injector_us < 500)  injector_us = 500;

        injector_pulse(injector_us);
    } 
    else {
        injector_us = 0;
    }
}


int main()
{
    stdio_init_all();

    adc_init();
    adc_gpio_init(ADC_HALL_PIN);
    adc_gpio_init(ADC_MAP_PIN);
    adc_gpio_init(ADC_TEMP_PIN);


    gpio_init(INJECTOR_PIN);
    gpio_set_dir(INJECTOR_PIN, GPIO_OUT);
    gpio_put(INJECTOR_PIN, 0);

    i2c_init(I2C_PORT, 400*1000);
    
    gpio_set_function(I2C_SDA, GPIO_FUNC_I2C);
    gpio_set_function(I2C_SCL, GPIO_FUNC_I2C);
    gpio_pull_up(I2C_SDA);
    gpio_pull_up(I2C_SCL);

    disp.external_vcc = false;
    ssd1306_init(&disp, 128, 64, I2C_PORT, OLED_ADDR);

    last_hall_time = get_absolute_time();

    while (true) {
        adc_select_input(ADC_HALL_CHANNEL);
        hall_adc = adc_read();

        bool hall_state = hall_adc > HALL_THRESH;
        if (hall_prev_state && !hall_state) {  // Falling edge
            absolute_time_t now = get_absolute_time();
            uint64_t dt_us = absolute_time_diff_us(last_hall_time, now);
            if (dt_us > 1000) {
                rpm = 60000000 / dt_us;
            }
            last_hall_time = now;
        }
        hall_prev_state = hall_state;

        poll_sensors();
        display_info();

        sleep_ms(100);
    }

    return 0;
}
